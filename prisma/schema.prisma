generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum EnumUserRole {
  VIEWER
  ADVISOR
  BROKER
  ADMIN
}

enum EnumPaymentStatus {
  PAID
  PENDING
  DEFEATED
}

enum EnumFrequency {
  MONTHLY
  ANNUAL
}

enum EnumPaymentMethod {
  CREDIT
  DEBIT
  BILL
}

model Policy {
  id             String         @id @default(uuid())
  name           String
  accountId      String
  productId      String
  policyNumber   String         @unique
  validity       DateTime
  frequency      EnumFrequency
  monthlyPremium Float?
  annualPremium  Float?
  paymentMethod  EnumPaymentMethod
  dueDate        DateTime
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime? @updatedAt

  account   Account  @relation(fields: [accountId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  payments  Payment[]
}

model Payment {
  id            String           @id @default(uuid())
  policyId      String
  plot          String
  price         Float
  paymentStatus EnumPaymentStatus
  parentId      String?
  dueDate       DateTime        
  paymentDate   DateTime?        
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt

  policy        Policy   @relation(fields: [policyId], references: [id])
  parent        Payment? @relation("PaymentParent", fields: [parentId], references: [id])
  children      Payment[] @relation("PaymentParent")
}

model Account {
  id            String    @id @default(uuid())
  name          String
  email         String
  sinacorCode   String
  accountNumber String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  policies      Policy[]
  users         UserAccount[]
}

model Product {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  policies  Policy[]
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique @db.VarChar(255)
  password  String?

  role      EnumUserRole @default(VIEWER)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  accounts   UserAccount[]
}

model UserAccount {
  id        String   @id @default(uuid())
  userId    String
  accountId  String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  account   Account  @relation(fields: [accountId], references: [id])

  @@unique([userId, accountId])
}